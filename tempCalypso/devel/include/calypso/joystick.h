// Generated by gencpp from file calypso/joystick.msg
// DO NOT EDIT!


#ifndef CALYPSO_MESSAGE_JOYSTICK_H
#define CALYPSO_MESSAGE_JOYSTICK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace calypso
{
template <class ContainerAllocator>
struct joystick_
{
  typedef joystick_<ContainerAllocator> Type;

  joystick_()
    : pressedButtonIndex(0)
    , axis1(0.0)
    , axis2(0.0)  {
    }
  joystick_(const ContainerAllocator& _alloc)
    : pressedButtonIndex(0)
    , axis1(0.0)
    , axis2(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _pressedButtonIndex_type;
  _pressedButtonIndex_type pressedButtonIndex;

   typedef float _axis1_type;
  _axis1_type axis1;

   typedef float _axis2_type;
  _axis2_type axis2;





  typedef boost::shared_ptr< ::calypso::joystick_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::calypso::joystick_<ContainerAllocator> const> ConstPtr;

}; // struct joystick_

typedef ::calypso::joystick_<std::allocator<void> > joystick;

typedef boost::shared_ptr< ::calypso::joystick > joystickPtr;
typedef boost::shared_ptr< ::calypso::joystick const> joystickConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::calypso::joystick_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::calypso::joystick_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::calypso::joystick_<ContainerAllocator1> & lhs, const ::calypso::joystick_<ContainerAllocator2> & rhs)
{
  return lhs.pressedButtonIndex == rhs.pressedButtonIndex &&
    lhs.axis1 == rhs.axis1 &&
    lhs.axis2 == rhs.axis2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::calypso::joystick_<ContainerAllocator1> & lhs, const ::calypso::joystick_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace calypso

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::calypso::joystick_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::calypso::joystick_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::calypso::joystick_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::calypso::joystick_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::calypso::joystick_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::calypso::joystick_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::calypso::joystick_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0af0840328fd2e6092bd3ff016034916";
  }

  static const char* value(const ::calypso::joystick_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0af0840328fd2e60ULL;
  static const uint64_t static_value2 = 0x92bd3ff016034916ULL;
};

template<class ContainerAllocator>
struct DataType< ::calypso::joystick_<ContainerAllocator> >
{
  static const char* value()
  {
    return "calypso/joystick";
  }

  static const char* value(const ::calypso::joystick_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::calypso::joystick_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 pressedButtonIndex\n"
"float32 axis1\n"
"float32 axis2\n"
"\n"
;
  }

  static const char* value(const ::calypso::joystick_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::calypso::joystick_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pressedButtonIndex);
      stream.next(m.axis1);
      stream.next(m.axis2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct joystick_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::calypso::joystick_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::calypso::joystick_<ContainerAllocator>& v)
  {
    s << indent << "pressedButtonIndex: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pressedButtonIndex);
    s << indent << "axis1: ";
    Printer<float>::stream(s, indent + "  ", v.axis1);
    s << indent << "axis2: ";
    Printer<float>::stream(s, indent + "  ", v.axis2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CALYPSO_MESSAGE_JOYSTICK_H
